generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
  PREMIUM_USER
}

model User{
  id String @id @default(cuid()) @map("_id")
  name String?
  email String @unique
  image String?
  accounts Account[]
  role UserRole @default(USER)

  myPlayground Playground[]
  staredPlayground StarMark[]
  chatMessages ChatMessage[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? 
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Templates{
  REACT
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}


model Playground {
  id String @id @default(cuid()) @map("_id")
  title String
  description String?
  template Templates @default(REACT)
  templateFiles TemplateFile[]
  craetedAt DateTime @default(now())
  updateAt DateTime @updatedAt
  StarMark StarMark[]
  userid String
  user User @relation(fields: [userid], references: [id], onDelete:Cascade)
}

model StarMark{
  id String @id @default(cuid()) @map("_id")
  userId String
  playgroundId String
  isMarked Boolean
  createAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
  playground Playground @relation(fields:[playgroundId], references: [id], onDelete:Cascade)

  @@unique([userId, playgroundId])
}

model TemplateFile {
  id           String     @id @default(cuid()) @map("_id")
  content      Json
  craetedAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  playgroundId String     @unique
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  role      String // "user" or "assistant"
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}